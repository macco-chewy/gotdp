service: gotdp-consumerapi-lambdas

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-mocha-plugin

custom:
  serverless-offline:
    port: 3000
  
  defaults:
    stage: Development
    region: us-west-1

  apiGateway:
    restApiId:
      "Fn::ImportValue": "ConsumerApi-${self:custom.stage}-${self:custom.region}-ApiGatewayRestApi-RestApiId"
    restApiRootResourceId:
      "Fn::ImportValue": "ConsumerApi-${self:custom.stage}-${self:custom.region}-ApiGatewayRestApiResourceV1-Id"
  lambda:
    defaultRole:
      "Fn::ImportValue": "ConsumerApi-${self:custom.stage}-${self:custom.region}-DefaultLambdaRole-Arn"
    defaultTimeout: 30
    namePrefix: "gotdp-consumerapi-${self:custom.stage}-"
  functions:
    default:
      refreshRate: "15 minutes"
    dev:
      refreshRage: "120 minutes"
  stackName: ${self:custom.stage}-${self:service} 
  stage: ${opt:stage,self:custom.defaults.stage}
  region: ${opt:region,self:custom.defaults.region}
  webpack:
    webpackConfig: webpack.config.js   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: npm   # Packager that will be used to package your external modules
    packExternalModulesMaxBuffer: 200 * 1024   # Size of stdio buffers for spawned child processes

provider:
  name: aws
  runtime: nodejs8.10
  stackName: ${self:custom.stackName}
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  timeout: ${self:custom.lambda.defaultTimeout}
  apiGateway:
    restApiId: ${self:custom.apiGateway.restApiId}
    restApiRootResourceId: ${self:custom.apiGateway.restApiRootResourceId}
  role: ${self:custom.lambda.defaultRole}
  environment:
    GOTDP_DYNAMO_TABLE: "gotdp-${self:custom.stage}"
  
# package:
#   individually: true

functions:
  getCharacters:
    handler: lambdas/getCharacters.handler
    name: ${self:custom.lambda.namePrefix}getCharacters
    events:
      - http:
          path: characters
          method: get
          cors: true
          private: false

  getQuestions:
    handler: lambdas/getQuestions.handler
    name: ${self:custom.lambda.namePrefix}getQuestions
    events:
      - http:
          path: questions
          method: get
          cors: true
          private: false
  
  getUser:
    handler: lambdas/getUser.handler
    name: ${self:custom.lambda.namePrefix}getUser
    events:
      - http:
          path: user/{name}
          method: get
          cors: true
          private: false
          request:
            parameters:
              paths:
                name: true
  
  getUsers:
    handler: lambdas/getUsers.handler
    name: ${self:custom.lambda.namePrefix}getUsers
    events:
      - http:
          path: users
          method: get
          cors: true
          private: false
  
  healthcheck:
    handler: lambdas/healthcheck.handler
    name: ${self:custom.lambda.namePrefix}healthcheck
    events:
      - http:
          path: healthcheck
          method: get
          cors: true
          private: false
    environment:
      STATUS: 'ok'
  
  putUser:
    handler: lambdas/putUser.handler
    name: ${self:custom.lambda.namePrefix}putUser
    events:
      - http:
          path: user
          method: put
          cors: true
          private: false
  
  refreshCharacters:
    handler: lambdas/refreshCharacters.handler
    name: ${self:custom.lambda.namePrefix}refreshCharacters
    events:
      - schedule:
          name: ${self:custom.lambda.namePrefix}refreshCharacters-schedule
          rate: rate(${self:custom.functions.${self:custom.stage}.refreshRate, self:custom.functions.default.refreshRate})
          enabled: true
  
  refreshQuestions:
    handler: lambdas/refreshQuestions.handler
    name: ${self:custom.lambda.namePrefix}refreshQuestions
    events:
